/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PerformanceMetric as PrismaPerformanceMetric,
} from "@prisma/client";

export class PerformanceMetricServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceMetricCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performanceMetric.count(args);
  }

  async performanceMetrics<T extends Prisma.PerformanceMetricFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PerformanceMetricFindManyArgs>
  ): Promise<PrismaPerformanceMetric[]> {
    return this.prisma.performanceMetric.findMany<Prisma.PerformanceMetricFindManyArgs>(
      args
    );
  }
  async performanceMetric<T extends Prisma.PerformanceMetricFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PerformanceMetricFindUniqueArgs>
  ): Promise<PrismaPerformanceMetric | null> {
    return this.prisma.performanceMetric.findUnique(args);
  }
  async createPerformanceMetric<T extends Prisma.PerformanceMetricCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PerformanceMetricCreateArgs>
  ): Promise<PrismaPerformanceMetric> {
    return this.prisma.performanceMetric.create<T>(args);
  }
  async updatePerformanceMetric<T extends Prisma.PerformanceMetricUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PerformanceMetricUpdateArgs>
  ): Promise<PrismaPerformanceMetric> {
    return this.prisma.performanceMetric.update<T>(args);
  }
  async deletePerformanceMetric<T extends Prisma.PerformanceMetricDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PerformanceMetricDeleteArgs>
  ): Promise<PrismaPerformanceMetric> {
    return this.prisma.performanceMetric.delete(args);
  }
}
