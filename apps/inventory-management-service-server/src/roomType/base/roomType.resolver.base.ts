/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RoomType } from "./RoomType";
import { RoomTypeCountArgs } from "./RoomTypeCountArgs";
import { RoomTypeFindManyArgs } from "./RoomTypeFindManyArgs";
import { RoomTypeFindUniqueArgs } from "./RoomTypeFindUniqueArgs";
import { CreateRoomTypeArgs } from "./CreateRoomTypeArgs";
import { UpdateRoomTypeArgs } from "./UpdateRoomTypeArgs";
import { DeleteRoomTypeArgs } from "./DeleteRoomTypeArgs";
import { RoomTypeService } from "../roomType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoomType)
export class RoomTypeResolverBase {
  constructor(
    protected readonly service: RoomTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "read",
    possession: "any",
  })
  async _roomTypesMeta(
    @graphql.Args() args: RoomTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoomType])
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "read",
    possession: "any",
  })
  async roomTypes(
    @graphql.Args() args: RoomTypeFindManyArgs
  ): Promise<RoomType[]> {
    return this.service.roomTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoomType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "read",
    possession: "own",
  })
  async roomType(
    @graphql.Args() args: RoomTypeFindUniqueArgs
  ): Promise<RoomType | null> {
    const result = await this.service.roomType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomType)
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "create",
    possession: "any",
  })
  async createRoomType(
    @graphql.Args() args: CreateRoomTypeArgs
  ): Promise<RoomType> {
    return await this.service.createRoomType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomType)
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "update",
    possession: "any",
  })
  async updateRoomType(
    @graphql.Args() args: UpdateRoomTypeArgs
  ): Promise<RoomType | null> {
    try {
      return await this.service.updateRoomType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomType)
  @nestAccessControl.UseRoles({
    resource: "RoomType",
    action: "delete",
    possession: "any",
  })
  async deleteRoomType(
    @graphql.Args() args: DeleteRoomTypeArgs
  ): Promise<RoomType | null> {
    try {
      return await this.service.deleteRoomType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
