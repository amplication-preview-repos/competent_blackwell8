/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Gds as PrismaGds } from "@prisma/client";

export class GdsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GdsCountArgs, "select">): Promise<number> {
    return this.prisma.gds.count(args);
  }

  async gdsItems<T extends Prisma.GdsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GdsFindManyArgs>
  ): Promise<PrismaGds[]> {
    return this.prisma.gds.findMany<Prisma.GdsFindManyArgs>(args);
  }
  async gds<T extends Prisma.GdsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GdsFindUniqueArgs>
  ): Promise<PrismaGds | null> {
    return this.prisma.gds.findUnique(args);
  }
  async createGds<T extends Prisma.GdsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GdsCreateArgs>
  ): Promise<PrismaGds> {
    return this.prisma.gds.create<T>(args);
  }
  async updateGds<T extends Prisma.GdsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GdsUpdateArgs>
  ): Promise<PrismaGds> {
    return this.prisma.gds.update<T>(args);
  }
  async deleteGds<T extends Prisma.GdsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GdsDeleteArgs>
  ): Promise<PrismaGds> {
    return this.prisma.gds.delete(args);
  }
}
