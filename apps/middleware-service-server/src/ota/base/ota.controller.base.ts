/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OtaService } from "../ota.service";
import { OtaCreateInput } from "./OtaCreateInput";
import { Ota } from "./Ota";
import { OtaFindManyArgs } from "./OtaFindManyArgs";
import { OtaWhereUniqueInput } from "./OtaWhereUniqueInput";
import { OtaUpdateInput } from "./OtaUpdateInput";

export class OtaControllerBase {
  constructor(protected readonly service: OtaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ota })
  async createOta(@common.Body() data: OtaCreateInput): Promise<Ota> {
    return await this.service.createOta({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ota] })
  @ApiNestedQuery(OtaFindManyArgs)
  async otas(@common.Req() request: Request): Promise<Ota[]> {
    const args = plainToClass(OtaFindManyArgs, request.query);
    return this.service.otas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ota })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ota(@common.Param() params: OtaWhereUniqueInput): Promise<Ota | null> {
    const result = await this.service.ota({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ota })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOta(
    @common.Param() params: OtaWhereUniqueInput,
    @common.Body() data: OtaUpdateInput
  ): Promise<Ota | null> {
    try {
      return await this.service.updateOta({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ota })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOta(
    @common.Param() params: OtaWhereUniqueInput
  ): Promise<Ota | null> {
    try {
      return await this.service.deleteOta({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
