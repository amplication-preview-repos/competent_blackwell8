/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ota as PrismaOta } from "@prisma/client";

export class OtaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OtaCountArgs, "select">): Promise<number> {
    return this.prisma.ota.count(args);
  }

  async otas<T extends Prisma.OtaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OtaFindManyArgs>
  ): Promise<PrismaOta[]> {
    return this.prisma.ota.findMany<Prisma.OtaFindManyArgs>(args);
  }
  async ota<T extends Prisma.OtaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OtaFindUniqueArgs>
  ): Promise<PrismaOta | null> {
    return this.prisma.ota.findUnique(args);
  }
  async createOta<T extends Prisma.OtaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OtaCreateArgs>
  ): Promise<PrismaOta> {
    return this.prisma.ota.create<T>(args);
  }
  async updateOta<T extends Prisma.OtaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OtaUpdateArgs>
  ): Promise<PrismaOta> {
    return this.prisma.ota.update<T>(args);
  }
  async deleteOta<T extends Prisma.OtaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OtaDeleteArgs>
  ): Promise<PrismaOta> {
    return this.prisma.ota.delete(args);
  }
}
